import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
from io import StringIO




def try_read_csv(file):
    """–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSV —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏"""
    encodings = ['utf-8', 'utf-16', 'cp1251', 'ISO-8859-1']
    for enc in encodings:
        try:
            return pd.read_csv(file, encoding=enc)
        except Exception:
            continue
    raise ValueError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSV —Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏")

def load_data():
    st.header("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    method = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏", ["–ò–∑ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"])
    df = None

    if method == "–ò–∑ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤":
        files = [f for f in os.listdir() if f.endswith(".csv")]
        if not files:
            st.warning("‚ùå –ù–µ—Ç CSV-—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ")
            return None
        file_selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", files)
        try:
            df = try_read_csv(file_selected)
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return None
    else:
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª", type="csv")
        if uploaded_file:
            try:
                df = try_read_csv(uploaded_file)
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: {e}")
                return None

    if df is not None:
        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        st.write("üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:")
        st.dataframe(df.head())

        buffer = StringIO()
        df.info(buf=buffer)
        st.text(buffer.getvalue())

        return df

    return None

def show_missing(df):
    st.subheader("üìâ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    missing = df.isnull().sum()
    total = missing.sum()
    if total == 0:
        st.success("‚úÖ –ù–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
    else:
        st.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {total} –ø—Ä–æ–ø—É—Å–∫–æ–≤")
        st.dataframe(missing[missing > 0])
    return total

def fill_missing(df):
    st.subheader("üõ† –†—É—á–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤")
    col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏", df.columns[df.isnull().any()])
    dtype = df[col].dtype

    if pd.api.types.is_numeric_dtype(dtype):
        method = st.selectbox("–ú–µ—Ç–æ–¥", ["mean", "median", "dropna"])
        if method == "mean":
            df[col] = df[col].fillna(df[col].mean())
        elif method == "median":
            df[col] = df[col].fillna(df[col].median())
        elif method == "dropna":
            df = df.dropna(subset=[col])

    elif pd.api.types.is_object_dtype(dtype):
        method = st.selectbox("–ú–µ—Ç–æ–¥", ["mode", "Unknown", "dropna"])
        if method == "mode":
            df[col] = df[col].fillna(df[col].mode()[0])
        elif method == "Unknown":
            df[col] = df[col].fillna("Unknown")
        elif method == "dropna":
            df = df.dropna(subset=[col])

    elif pd.api.types.is_datetime64_any_dtype(dtype):
        method = st.selectbox("–ú–µ—Ç–æ–¥", ["ffill", "bfill", "interpolate"])
        if method == "interpolate":
            df[col] = df[col].interpolate()
        else:
            df[col] = df[col].fillna(method=method)

    st.success(f"‚úÖ –ü—Ä–æ–ø—É—Å–∫–∏ –≤ '{col}' –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
    return df

def auto_fill_missing(df):
    st.subheader("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤")
    for col in df.columns[df.isnull().any()]:
        dtype = df[col].dtype
        if pd.api.types.is_numeric_dtype(dtype):
            df[col] = df[col].fillna(df[col].mean())
        elif pd.api.types.is_object_dtype(dtype):
            df[col] = df[col].fillna("Unknown")
        elif pd.api.types.is_datetime64_any_dtype(dtype):
            df[col] = df[col].fillna(method='ffill')
    st.success("‚úÖ –í—Å–µ –ø—Ä–æ–ø—É—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
    return df

def remove_duplicates(df):
    st.subheader("üßπ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
    duplicates = df.duplicated().sum()
    if duplicates == 0:
        st.info("‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        st.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {duplicates} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        if st.button("–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã"):
            df = df.drop_duplicates()
            st.success("‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã")
    return df

def aggregate_summary(df):
    st.subheader("üìä –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∏ –≥—Ä–∞—Ñ–∏–∫–∏")
    group_col = st.selectbox("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ", df.columns)
    numeric_cols = df.select_dtypes(include=np.number).columns
    value_col = st.selectbox("–ß–∏—Å–ª–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞", numeric_cols)

    agg_func = st.selectbox("–§—É–Ω–∫—Ü–∏—è", ["mean", "sum", "count", "min", "max"])
    chart_type = st.selectbox("–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞", ["–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è", "–ö—Ä—É–≥–æ–≤–∞—è"])

    try:
        result = df.groupby(group_col)[value_col].agg(agg_func).reset_index()
        st.dataframe(result)

        plt.figure(figsize=(10, 6))
        if chart_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
            sns.barplot(x=group_col, y=value_col, data=result)
        elif chart_type == "–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è":
            sns.scatterplot(x=group_col, y=value_col, data=result)
        elif chart_type == "–ö—Ä—É–≥–æ–≤–∞—è":
            plt.pie(result[value_col], labels=result[group_col], autopct='%1.1f%%')

        plt.title(f"{agg_func.upper()} {value_col} –ø–æ {group_col}")
        plt.xticks(rotation=45)
        st.pyplot(plt.gcf())
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

def main():
    st.set_page_config(page_title="Data Cleaner", layout="wide")
    st.title("üßº Data Cleaner: –û—á–∏—Å—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ CSV")

    df = load_data()
    if df is None:
        return

    if show_missing(df) > 0:
        if st.checkbox("üîß –†—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤"):
            df = fill_missing(df)
        if st.checkbox("‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"):
            df = auto_fill_missing(df)

    df = remove_duplicates(df)

    if st.checkbox("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"):
        aggregate_summary(df)

    if st.checkbox("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"):
        filename = st.text_input("–ò–º—è —Ñ–∞–π–ª–∞:", "cleaned_data.csv")
        if filename:
            csv = df.to_csv(index=False).encode("utf-8")
            st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV", csv, file_name=filename, mime="text/csv")

if __name__ == "__main__":
    main()