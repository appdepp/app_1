import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from io import StringIO
from scipy.stats import zscore

# === 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
def load_data():
    st.title("üßπ –û—á–∏—Å—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    method = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏", [
        "–ò–∑ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ",
        "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"
    ])
    df = None

    if method == "–ò–∑ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ":
        files = [f for f in os.listdir() if f.endswith(".csv")]
        if not files:
            st.warning("‚ùå –í –ø–∞–ø–∫–µ –Ω–µ—Ç CSV-—Ñ–∞–π–ª–æ–≤.")
            return None
        file_selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", files)
        try:
            df = pd.read_csv(file_selected, encoding="utf-8")
        except UnicodeDecodeError:
            df = pd.read_csv(file_selected, encoding="ISO-8859-1")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            return None

    elif method == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞":
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª", type="csv")
        if uploaded_file is not None:
            try:
                df = pd.read_csv(uploaded_file, encoding="utf-8")
            except UnicodeDecodeError:
                df = pd.read_csv(uploaded_file, encoding="ISO-8859-1")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
                return None

    if df is not None:
        if df.empty:
            st.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π.")
            return None

        df.columns = df.columns.str.strip()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –∫–æ–ª–æ–Ω–æ–∫
        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        st.write("üìä –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(df.head())

        st.write("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ DataFrame")
        buffer = StringIO()
        df.info(buf=buffer)
        s = buffer.getvalue()
        st.text(s)

        return df

    return None

# === 8. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ===
def visualize(df):
    st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
    numeric_cols = df.select_dtypes(include=np.number).columns
    if len(numeric_cols) < 2:
        st.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.")
        return

    x_col = st.selectbox("–û—Å—å X", numeric_cols, key="x")
    y_col = st.selectbox("–û—Å—å Y", numeric_cols, key="y")

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    plot_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞", ["–¢–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫"])

    plt.figure(figsize=(10, 5))

    if plot_type == "–¢–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
        sns.scatterplot(data=df, x=x_col, y=y_col)
        plt.title(f"–¢–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: {x_col} vs {y_col}")
    elif plot_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
        sns.histplot(df[x_col], kde=True)
        plt.title(f"–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –¥–ª—è: {x_col}")
    elif plot_type == "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫":
        sns.lineplot(data=df, x=x_col, y=y_col)
        plt.title(f"–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: {x_col} vs {y_col}")

    st.pyplot(plt)

# === 9. –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    st.title("üßº –û—á–∏—Å—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")

    df = load_data()
    if df is None:
        return

    st.subheader("üìä –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
    st.dataframe(df.head())

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    total_missing = show_missing(df)
    if total_missing > 0:
        st.markdown("### üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
        if st.checkbox("üîß –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ä—É—á–Ω—É—é"):
            df = fill_missing(df)

        if st.checkbox("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏"):
            df = auto_fill_missing(df)

    # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    if st.checkbox("üßπ –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã"):
        df = remove_duplicates(df)

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤
    if st.checkbox("üìè –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã"):
        df = remove_outliers(df)

    # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    if st.checkbox("üìà –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—é –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"):
        visualize(df)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    if st.checkbox("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π DataFrame"):
        default_name = "cleaned_data.csv"
        filename = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Å .csv)", value=default_name)

        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"):
            try:
                df.to_csv(filename, index=False)
                st.success(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ '{filename}' –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        st.download_button(
            label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –∫–∞–∫ CSV",
            data=df.to_csv(index=False).encode('utf-8'),
            file_name=filename,
            mime='text/csv'
        )

if __name__ == "__main__":
    main()