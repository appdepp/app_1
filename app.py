import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
from io import StringIO

def load_data():
    st.header("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

    method = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏", ["–ò–∑ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ", "–í–≤–µ—Å—Ç–∏ –ø—É—Ç—å –≤—Ä—É—á–Ω—É—é"])
    path = None

    if method == "–ò–∑ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ":
        files = [f for f in os.listdir() if f.endswith(".csv")]
        if not files:
            st.warning("‚ùå –í –ø–∞–ø–∫–µ –Ω–µ—Ç CSV-—Ñ–∞–π–ª–æ–≤.")
            return None
        file_selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", files)
        path = file_selected
    else:
        path = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ CSV-—Ñ–∞–π–ª—É:")

    if path:
        try:
            df = pd.read_csv(path)
            st.success(f"‚úÖ –§–∞–π–ª '{path}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
            st.write("üìä –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö", df.head())

            st.write("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ DataFrame")
            buffer = StringIO()
            df.info(buf=buffer)
            st.text(buffer.getvalue())

            return df
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            return None
    return None


def show_missing(df):
    st.subheader("üìâ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
    missing = df.isnull().sum()
    total_missing = missing.sum()
    if total_missing == 0:
        st.success("‚úÖ –ù–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
    else:
        st.warning("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
        st.dataframe(missing[missing > 0])
    return total_missing


def fill_missing(df):
    st.subheader("üß© –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤—Ä—É—á–Ω—É—é")
    col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É", df.columns[df.isnull().any()])
    dtype = df[col].dtype

    if pd.api.types.is_numeric_dtype(dtype):
        method = st.selectbox("–ú–µ—Ç–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è", ["mean", "median", "dropna"])
        if method == "mean":
            df[col] = df[col].fillna(df[col].mean())
        elif method == "median":
            df[col] = df[col].fillna(df[col].median())
        elif method == "dropna":
            df = df.dropna(subset=[col])
    elif pd.api.types.is_object_dtype(dtype):
        method = st.selectbox("–ú–µ—Ç–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è", ["mode", "Unknown", "dropna"])
        if method == "mode":
            df[col] = df[col].fillna(df[col].mode()[0])
        elif method == "Unknown":
            df[col] = df[col].fillna("Unknown")
        elif method == "dropna":
            df = df.dropna(subset=[col])
    elif pd.api.types.is_datetime64_any_dtype(dtype):
        method = st.selectbox("–ú–µ—Ç–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è", ["ffill", "bfill", "interpolate"])
        if method == "interpolate":
            df[col] = df[col].interpolate()
        else:
            df[col] = df[col].fillna(method=method)

    st.success(f"‚úÖ –ü—Ä–æ–ø—É—Å–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ '{col}' –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
    return df


def auto_fill_missing(df):
    st.subheader("‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤")
    for col in df.columns[df.isnull().any()]:
        dtype = df[col].dtype
        if pd.api.types.is_numeric_dtype(dtype):
            df[col] = df[col].fillna(df[col].mean())
        elif pd.api.types.is_object_dtype(dtype):
            df[col] = df[col].fillna("Unknown")
        elif pd.api.types.is_datetime64_any_dtype(dtype):
            df[col] = df[col].fillna(method='ffill')
    st.success("‚úÖ –í—Å–µ –ø—Ä–æ–ø—É—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    return df


def aggregate_summary(df):
    st.subheader("üìä –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
    group_col = st.selectbox("–ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏", df.columns)
    numeric_cols = df.select_dtypes(include=np.number).columns
    value_col = st.selectbox("–ß–∏—Å–ª–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏", numeric_cols)

    agg_func = st.selectbox("–§—É–Ω–∫—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏", ["mean", "sum", "count", "min", "max"])
    chart_type = st.selectbox("–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞", ["–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è", "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞"])

    try:
        result = df.groupby(group_col)[value_col].agg(agg_func).reset_index()
        st.dataframe(result)

        plt.figure(figsize=(10, 6))
        if chart_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
            sns.barplot(x=group_col, y=value_col, data=result)
        elif chart_type == "–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è":
            sns.scatterplot(x=group_col, y=value_col, data=result)
        elif chart_type == "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
            plt.pie(result[value_col], labels=result[group_col], autopct='%1.1f%%')

        plt.title(f"{agg_func.upper()} {value_col} –ø–æ {group_col}")
        plt.xticks(rotation=45)

        fig = plt.gcf()
        st.pyplot(fig)
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def main():
    st.title("üßº –û—á–∏—Å—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")

    df = load_data()
    if df is None:
        return

    if show_missing(df) > 0:
        if st.checkbox("üîß –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é"):
            df = fill_missing(df)

        if st.checkbox("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –ø—Ä–æ–ø—É—Å–∫–∏"):
            df = auto_fill_missing(df)

    if st.checkbox("üìà –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—é –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"):
        aggregate_summary(df)

    if st.checkbox("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π DataFrame"):
        filename = st.text_input("–ò–º—è —Ñ–∞–π–ª–∞", "cleaned_data.csv")
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
            df.to_csv(filename, index=False)
            st.success(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {filename}")


if __name__ == "__main__":
    main()