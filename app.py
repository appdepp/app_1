import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import os
from io import StringIO
from scipy.stats import zscore

# === 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
def load_data():
    st.title("üßπ –û—á–∏—Å—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    method = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏", [
        "–ò–∑ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ",
        "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"
    ])
    df = None

    if method == "–ò–∑ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ":
        files = [f for f in os.listdir() if f.endswith(".csv")]
        if not files:
            st.warning("‚ùå –í –ø–∞–ø–∫–µ –Ω–µ—Ç CSV-—Ñ–∞–π–ª–æ–≤.")
            return None
        file_selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", files)
        try:
            df = pd.read_csv(file_selected, encoding="utf-8")
        except UnicodeDecodeError:
            df = pd.read_csv(file_selected, encoding="ISO-8859-1")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            return None

    elif method == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞":
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª", type="csv")
        if uploaded_file is not None:
            try:
                df = pd.read_csv(uploaded_file, encoding="utf-8")
            except UnicodeDecodeError:
                df = pd.read_csv(uploaded_file, encoding="ISO-8859-1")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
                return None

    if df is not None:
        if df.empty:
            st.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π.")
            return None

        df.columns = df.columns.str.strip()
        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        st.write("üìä –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(df.head())

        st.write("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ DataFrame")
        buffer = StringIO()
        df.info(buf=buffer)
        s = buffer.getvalue()
        st.text(s)

        return df

    return None

# === 2. –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö ===
def view_data(df):
    st.subheader("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
    st.write("–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:", df.shape)
    st.dataframe(df.head())

# === 3. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤ ===
def show_missing(df):
    st.subheader("üìâ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
    missing = df.isnull().sum()
    total_missing = missing.sum()
    if total_missing == 0:
        st.success("‚úÖ –ù–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
    else:
        st.warning("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
        st.dataframe(missing[missing > 0])
    return total_missing

# === 4. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤—Ä—É—á–Ω—É—é ===
def fill_missing(df):
    st.subheader("üß© –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤—Ä—É—á–Ω—É—é")
    for col in df.columns[df.isnull().any()]:
        st.write(f"üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–æ–Ω–∫–∏: **{col}**")
        if df[col].dtype == "object":
            fill_value = st.text_input(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (—Å—Ç—Ä–æ–∫–∞):", key=col)
            if fill_value:
                df[col].fillna(fill_value, inplace=True)
        else:
            method = st.selectbox(f"–ú–µ—Ç–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è {col}", ["—Å—Ä–µ–¥–Ω–µ–µ", "–º–µ–¥–∏–∞–Ω–∞", "–º–æ–¥–∞"], key=col)
            if method == "—Å—Ä–µ–¥–Ω–µ–µ":
                df[col].fillna(df[col].mean(), inplace=True)
            elif method == "–º–µ–¥–∏–∞–Ω–∞":
                df[col].fillna(df[col].median(), inplace=True)
            elif method == "–º–æ–¥–∞":
                mode_val = df[col].mode()
                if not mode_val.empty:
                    df[col].fillna(mode_val[0], inplace=True)
    return df

# === 5. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ ===
def auto_fill_missing(df):
    st.subheader("‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤")
    for col in df.columns[df.isnull().any()]:
        if df[col].dtype == "object":
            mode_val = df[col].mode()
            if not mode_val.empty:
                df[col].fillna(mode_val[0], inplace=True)
        else:
            df[col].fillna(df[col].median(), inplace=True)
    st.success("‚úÖ –ü—Ä–æ–ø—É—Å–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
    return df

# === 6. –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ===
def remove_duplicates(df):
    st.subheader("üóë –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
    original = df.shape[0]
    df = df.drop_duplicates()
    removed = original - df.shape[0]
    st.success(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {removed} —Å—Ç—Ä–æ–∫")
    return df

# === 7. –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ ===
def remove_outliers(df):
    st.subheader("üìâ –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤")
    numeric_cols = df.select_dtypes(include=np.number).columns
    if len(numeric_cols) == 0:
        st.info("‚ö†Ô∏è –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–±—Ä–æ—Å–æ–≤.")
        return df

    col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤", numeric_cols)
    method = st.selectbox("–ú–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤", ["IQR (–º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö)", "Z-score"])

    original_size = df.shape[0]

    if method == "IQR (–º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö)":
        Q1 = df[col].quantile(0.25)
        Q3 = df[col].quantile(0.75)
        IQR = Q3 - Q1
        lower = Q1 - 1.5 * IQR
        upper = Q3 + 1.5 * IQR
        df = df[(df[col] >= lower) & (df[col] <= upper)]
    elif method == "Z-score":
        z_scores = np.abs(zscore(df[col]))
        df = df[z_scores < 3]

    removed = original_size - df.shape[0]
    st.success(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –≤—ã–±—Ä–æ—Å–æ–≤: {removed} —Å—Ç—Ä–æ–∫")
    return df

# === 8. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ===
def visualize(df):
    st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
    numeric_cols = df.select_dtypes(include=np.number).columns
    if len(numeric_cols) < 2:
        st.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.")
        return

    x_col = st.selectbox("–û—Å—å X", numeric_cols, key="x")
    y_col = st.selectbox("–û—Å—å Y", numeric_cols, key="y")

    plt.figure(figsize=(10, 5))
    sns.scatterplot(data=df, x=x_col, y=y_col)
    st.pyplot(plt)

# === 9. –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    df = load_data()
    if df is not None:
        view_data(df)

        if show_missing(df) > 0:
            if st.checkbox("üîß –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é"):
                df = fill_missing(df)

            if st.checkbox("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –ø—Ä–æ–ø—É—Å–∫–∏"):
                df = auto_fill_missing(df)

        if st.checkbox("üóë –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã"):
            df = remove_duplicates(df)

        if st.checkbox("üìâ –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã"):
            df = remove_outliers(df)

        if st.checkbox("üìà –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"):
            visualize(df)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    main()
